// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//https://www.prisma.io/docs/concepts/components/prisma-schema/generators
//"npx prisma migrate" ou "npm run migrate dev" actionne les 2 générateurs à chaque fois que la commande est lancée.
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum Role {
  ADMIN
  LEAD
  DEV
  INTERN
}

enum Status {
  OPEN
  IN_PROGRESS
  REVIEW
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}


//https://www.prisma.io/docs/concepts/components/prisma-schema/data-model
model User{
  id Int @id @default(autoincrement())
  firstname String @db.VarChar(70)
  lastname String @db.VarChar(70)
  email String @unique @db.VarChar(70)
  /// @TypeGraphQL.omit(output: true)
  password String
  /// @TypeGraphQL.omit(output: true, input: true)
  createdAt DateTime @default(now())
  /// @TypeGraphQL.omit(output: true, input: true)
  updatedAt DateTime? @updatedAt
  roles    Role     @default(DEV)
  //Relations
  comments Comment[]
  tickets_author Ticket[] @relation("author")
  tickets_assign Ticket[] @relation("assigned")
  projects Project[]
  projects_author Project[] @relation("project_author")
}


model Ticket{
  id Int @id @default(autoincrement()) //For a string ID   --- id String @id @default(cuid())
  title String @db.VarChar(75)
  description String @db.VarChar(255)
  status Status @default(OPEN)
  priority Priority @default(LOW)
  time_estimation DateTime?
  files File[]
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  //Relations
  //https://www.prisma.io/docs/concepts/components/prisma-schema/relations#disambiguating-relations
  user_author User @relation(name:"author",fields: [user_author_id], references: [id])
  user_author_id Int
  user_assign User? @relation("assigned",fields: [user_assign_id], references: [id], onDelete: Cascade)
  user_assign_id Int?
  project Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id Int
  comments Comment[]
  labels Label[]
}

model File{
  id Int @id @default(autoincrement())
  name String @db.VarChar(75)
  url String  @db.VarChar(255)
  size Int? @db.Int
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  ticket Ticket @relation(fields: [ticket_id], references: [id])
  ticket_id Int
}

model Comment{
  id Int @id @default(autoincrement())
  content String @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  //Relations
  author User @relation(fields: [author_id], references: [id])
  author_id Int
  ticket Ticket @relation(fields: [ticket_id], references: [id])
  ticket_id Int
}

model Project{
  id Int @id @default(autoincrement())
  title String @db.VarChar(75)
  subject String? @db.VarChar(255)
  code String @db.Char(3)
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  //Relations
  tickets Ticket[] 
  members User[]
  user_author_project User @relation(name:"project_author",fields: [user_author_project_id], references: [id], onDelete: Cascade)
  user_author_project_id Int
}

model Label{
  id Int @id @default(autoincrement())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  //Relations
  tickets Ticket[]
}
